// Package multicast offers a Chan type that can multicast and replay messages to
// multiple receivers.
//
// The standard Go channel cannot multicast the same message to multiple receivers
// and it cannot replay messages previously sent to it. The Chan type offered
// here does allow multicasting and playback of messages. You can even limit playback
// to messages younger than a certain age because `Chan` also stores a timestamp
// with each message you send to it.
//
// This multicast channel is different from other multicast implementations in
// that it uses only fast synchronization primitives like atomic operations to
// implement its features. Furthermore, it also doesn't use goroutines internally.
// This allows it to operate at a very high level of performance.
//
// If you are in a situation where you need to record and replay a stream
// of data or you need to split a stream of data into multiple identical streams,
// then this package offers a fast and simple implementation.
//
//	HOW THIS PACKAGE IS GENERATED
//
//	The implementation (exported here as the multicast package) has actually been
//	generated from a generic multicast implementation found at the import path:
//
//		github.com/reactivego/multicast/generic 
//
//	The generated package here consists of three files; doc.go, example_test.go and
//	multicast.go. The actual package code is in multicast.go, but it is generated
//	from the generic implementation using information from doc.go and example_test.go.
//
// 	The [doc.go] file imports the generic implementation we want to use:
//
//		import _ "github.com/reactivego/multicast/generic"
//
//	The [example_test.go] file contains an example program that excercises all 
//	the functionality we want to export from the generic implementation. See the
//	Example below this text for the actual source of example_test.go.
//
// 	The package is generated by running the jig command. The code needed to
//	compile the example is generated into the file multicast.go. That file then
//	contains the source code for the actual exported multicast package.
//
//	The commands to run in order to (re)generate the code are shown below:
//
//	$ go get github.com/reactivego/multicast/generic
//	$ cd $GOPATH/src/github.com/reactivego/multicast
//	$ go run -v github.com/reactivego/jig -rv
//	removing file "multicast.go"
//	found 16 templates in package "multicast" (github.com/reactivego/multicast/generic)
//	generating "NewChan"
//	  ChanPadding
//	  ChanState
//	  Chan
//	  ErrOutOfEndpoints
//	  endpoints
//	  NewChan
//	generating "Endpoint"
//	  Endpoint
//	generating "Chan FastSend"
//	  Chan slideBuffer
//	  Chan FastSend
//	generating "Chan Send"
//	  Chan Send
//	generating "Chan Close"
//	  Chan Close
//	generating "Chan Closed"
//	  Chan Closed
//	generating "Chan NewEndpoint"
//	  Chan NewEndpoint
//	generating "Endpoint Range"
//	  Endpoint Range
//	generating "Endpoint Cancel"
//	  Endpoint Cancel
//	generating "Endpoint commitData"
//	  Chan commitData
//	  missing "Endpoint commitData"
//	writing file "multicast.go"
package multicast

import _ "github.com/reactivego/multicast/generic"
